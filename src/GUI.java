import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Array;

// Press Shift twice to open the Search Everywhere dialog and type `show whitespaces`,
// then press Enter. You can now see whitespace characters in your code.
public class GUI implements ActionListener {

    private JFrame frame;
    private JPanel panel;
    public  GUI() {
        frame = new JFrame();

        JButton button = new JButton("Draw");
        button.addActionListener(this);

        panel = new JPanel();
        panel.setBorder(BorderFactory.createEmptyBorder(1080,1920,10,30));
        panel.setLayout(new GridLayout(0, 1));
        panel.add(button);

        frame.add(panel, BorderLayout.CENTER);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setTitle("Draw from coordinates");
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        new GUI();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        double[][][] drakonas = {
/*Pagrindinės dalys(viršus): */ {{-12.1,-1.1}, {-12.0,-0.6}, {-11.7,0}, {-11.3,0.3}, {-11.0,0.5}, {-10.5,1.0}, {-10.0,1.2}, {-9.5,1.5}, {-9.0,1.9}, {-8.5,2.25}, {-8.0,2.5}, {-7.5,2.7}, {-7.0,2.75}, {-6.7,2.8}, {-6.5,3.0}, {-6.3,3.5}, {-6.0,3.7}, {-5.5,3.9}, {-5.0,4.1}, {-4.5,4.3}, {-4.0,4.6}, {-3.5,4.85}, {-3.0,5.2}, {-2.5,5.6}, {-2.0,6.0}, {-1.5,6.4}, {-1.0,6.9}, {-0.5,7.5}, {-0.2,7.8}, {-2.6,4.1}, {-0.5,5.4}},
/*Ragas: */                     {{2,6.5}, {4,7.5}, {3.5,6.8}},
/*Atskirai : */                 {{1.4,4.9}, {-1.1,2.4}},
/*Pagrindinės dalys(apačia): */ {{-12.1,-1.1}, {-10.2,-0.9}, {-10.01,-1.2}, {-9.9,-0.9}, {-9.65,-1.3}, {-9.5,-0.9}, {-9.3,-1.2}, {-9.1,-0.8}, {-8.8,-1.4}, {-8.7,-0.9}, {-8.4,-1.3}, {-8.2,-0.9}, {-8,-1.4}, {-7.8,-0.9}, {-7.6,-1.4}, {-7.4,-1}, {-7.2,-1.5}, {-7.05,-0.9}, {-6.5,-1.1}, {-6.2,-1.3}, {-6,-1.7}, {-6.1,-2.3}, {-6.7,-2.7}, {-7.2,-2.9}, {-7.5,-2.5}, {-7.7,-2.9}, {-8,-2.6}, {-8.2,-2.9}, {-8.5,-2.5}, {-8.7,-2.9}, {-9,-2.6}, {-9.1,-2.9}, {-9.4,-2.6}, {-9.5,-2.8}, {-9.75,-2.5}, {-10,-2.8}, {-10.2,-2.9}, {-10.5,-2.9}, {-10.9,-2.9}, {-10.9,-3.3}, {-10.7,-3.5}, {-10,-3.6}, {-9.6,-3.5}, {-9.5,-4.7}, {-9.1,-3.5}, {-8.5,-3.4}, {-8,-3.5}, {-7.5,-3.5}, {-7,-3.6}, {-6.5,-3.6}, {-5.5,-3.6}, {-5,-3.9}, {-4.9,-4.4}, {-5,-5}, {-5.2,-5.5}, {-5.5,-6}, {-5.5,-7.5}, {-5.2,-9.1}, {-4.5,-10}, {-3.2,-10.9}, {-3,-11.2}, {-3,-11.8}, {-3.5,-12.5}, {-4.1,-13.25}, {-4.5,-13.5}, {-5.5,-13.9}, {-6,-13.4}, {-6.5,-12.8}, {-7,-12.7}, {-6.8,-13.1}, {-5.9,-14.1}, {-6.2,-14.2}, {-7,-13.8}, {-8.3,-13.7}, {-6.5,-14.6}, {-6.7,-15}, {-7.8,-14.9}, {-8.3,-14.8}, {-8.8,-15.3}, {-8.2,-15.1}, {-7.5,-15.1}, {-6.9,-15.15}, {-7.1,-15.4}, {-7.7,-15.4}, {-8.5,-15.9}, {-8.6,-16.1}, {-8,-15.8}, {-7.5,-15.7}, {-7.2,-15.7}, {-7.1,-16}, {-7.8,-16.5}, {-8.3,-16.5}, {-7.9,-16.7}, {-7,-16.4}, {-6.5,-15.8}, {-6,-15.7}, {-5.5,-15.8}, {-5,-15.7}, {-4.5,-15.6}, {-4,-15.5}, {-3.5,-15.5}, {-3,-15.4}, {-2,-15.3}, {-0.1,-13}, {0,-12.5}, {1.1,-12.5}},
/*Antakiai : */                 {{-6.4,1.9}, {-6.2,2.1}, {-6.4,2.1}, {-6.1,2.4}, {-6.2,2.5}, {-5.9,2.7}, {-5.95,2.45}, {-5.7,2.7}, {-5.7,2.5}, {-5.5,2.8}, {-5.6,2.5}, {-5.4,2.7}, {-5.4,2.6}, {-5.3,2.6}, {-5.1,2.8}, {-5.1,2.6}, {-5,2.8}, {-5,2.6}, {-4.8,2.9}, {-4.8,2.6}, {-4.7,2.8}, {-4.6,2.6}},
/*Akis : */                     {{-5.8,2.1}, {-5.5,2.3}, {-5.1,2.3}, {-5,2.1}, {-5.1,1.9}, {-5.7,1.9}, {-5.8,2.1}},
/*Koja : */                     {{-5.5,-7.5}, {-6,-7.6}, {-6.5,-7.7}, {-7.2,-8}, {-7.5,-8.2}, {-8.2,-8.7}, {-8.7,-9}, {-9.4,-9.3}, {-10.5,-9.2}, {-10.7,-8.8}, {-11,-8.6}, {-11.5,-8.6}, {-12.3,-8.6},{-11.5,-8.8}, {-11.3,-8.9}, {-11,-9}, {-10.8,-9.3}, {-10.9,-9.4}, {-11.4,-9.4}, {-11.9,-9.6}, {-12.1,-9.8}, {-12.4,-10}, {-12.6,-10.3}, {-12.3,-10.1}, {-12,-9.9},{-11.5,-9.3}, {-10.9,-9.5}, {-11,-9.8}, {-11.5,-9.9}, {-11.8,-10.1}, {-12.2,-10.4}, {-12.5,-10.7}, {-12,-10.5}, {-11.3,-10.1}, {-11,-10.1}, {-11.3,-10.5}, {-11.9,-10.8},{-12.9,-11.4}, {-13.1,-11.8}, {-11.8,-11.1}, {-11.3,-11}, {-10.6,-10.4}, {-10.6,-10.7}, {-11.5,-11.3}, {-12.1,-11.4}, {-12.4,-11.6}, {-10.8,-11.3}, {-10.3,-10.8},{-10.3,-10.4}, {-9.9,-10.4}, {-7.7,-10.6}, {-6.5,-10.5}, {-6,-10.4}, {-5.4,-10.2}, {-4.7,-9.7}},
/*Uodega : */                   {{8.3,-10.2}, {9,-10.2}, {9.5,-10.1}, {10,-10}, {10.5,-9.8}, {11,-9.5}, {11.5,-9.1}, {12,-8.7}, {12.5,-8.2}, {13,-7.5}, {13.5,-7}, {14,-6.4}, {14.5,-5.7}, {15,-4.9}, {15.5,-3.9},{15.8,-3}, {15.9,-2.5}, {15.8,-1.5}, {15.7,-1}, {15.5,-0.7}, {15.3,-0.6}, {15,-0.6}, {14.5,-1}, {14.7,-0.7}, {15,-0.5}, {15.5,-0.3}, {16,-0.3}, {16.5,-1.1}, {16.6,-1.5},{16.7,-2}, {16.8,-2.9}, {16.7,-3.5}, {16.5,-4.1}, {16.2,-5}, {16,-5.5}, {15.2,-7}, {14.8,-7.5}, {14.5,-7.8}, {14,-8.3}, {13.5,-8.9}, {13,-9.4}, {11,-10.7}, {10.5,-10.9},{9.5,-11.3}, {8.5,-11.6}, {7.5,-11.9}, {7,-12}, {6.6,-12}},
/*Sparnas : */                  {{-3.7,-8.5}, {-2.9,-8.5}, {-2.5,-8.6}, {-2,-8.9}, {-1.5,-9.2}, {-1,-9.6}, {-0.5,-10.1}, {0,-10.6}, {0.5,-11.5}, {1,-12.3}, {1.5,-13}, {1.9,-13.5}, {2.5,-14}, {3,-14.5}, {3.5,-15.2}, {3.8,-15.6}, {3.8,-15.9}, {4,-15.6}, {4.4,-15}, {4.7,-14.5}, {5.1,-14}, {5.5,-13.5}, {6,-12.7}, {6.6,-12}, {7.4,-11}, {8.3,-10.2}, {11.4,-7.5}, {12,-6.7}, {12.5,-6.1}, {13,-5.2}, {13.2,-4.5}, {13.5,-4.4}, {13.8,-2.2}, {14,-0.5}, {13.9,0.5}, {13.8,2.3}, {13.3,4}, {13,4.7}, {12.5,5.2}, {11.5,5.9}, {10,6.4}, {7.5,6.7}, {5.5,6.8}, {3.5,6.8}, {2,6.5}, {0.5,6}, {-0.5,5.4}, {-1.2,4}, {-1.4,2.7}, {-1.2,3.2}, {-1,3.6}, {-0.8,4}, {-0.4,4.5}, {0,5}, {0.8,5}, {1.6,4.8}, {2.9,1.2}, {2.7,0.5}, {2.3,-0.4}, {2,-1.2}, {1.4,-2.4}, {0.8,-3.2}, {-0.3,-4.1}, {-0.6,-4.7}, {-1,-5.1}, {-1.5,-5.5}, {-2,-5.7}, {-2.5,-5.9}, {-3,-6.1}, {-3.5,-6.4}, {-4,-6.5}, {-3.7,-8.5}},
/*Kaklas : */                   {{-1.4,2.7}, {-0.5,1.5}, {-0.5,-3.8}, {-1,-5.1}},
        };
        Graphics g = panel.getGraphics();

        //settings
        double SCALE = 30.0;

        int OFFSET_X = panel.getWidth() / 2;
        int OFFSET_Y = panel.getHeight() / 2;
        long WAIT_TIME_MS = 50;

        for (int i = 0; i < drakonas.length; i++) {
            for (int j = 0; j < drakonas[i].length-1; j++) {
                g.drawLine(OFFSET_X + (int) (drakonas[i][j][1]*SCALE),OFFSET_Y + (int) (drakonas[i][j][0]*SCALE),
                            OFFSET_X + (int) (drakonas[i][j+1][1]*SCALE),OFFSET_Y + (int) (drakonas[i][j+1][0]*SCALE));

                try {
                    Thread.sleep(WAIT_TIME_MS);
                } catch (InterruptedException ev) {
                    ev.printStackTrace();
                }
            }
        }
    }
}